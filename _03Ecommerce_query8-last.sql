-- 8. Calculate the percentage of total revenue contributed by each product category.
--All order 
select OT.Order_id, ORDER_ITEM_ID,P.PRODUCT_CATEGORY, OT.PRICE from ORDER_ITEMS OT Inner Join PRODUCTS P ON OT.PRODUCT_ID=P.PRODUCT_ID Order By OT.Order_id;


select P.PRODUCT_CATEGORY, sum(OT.PRICE) from ORDER_ITEMS OT Inner Join PRODUCTS P ON OT.PRODUCT_ID=P.PRODUCT_ID
Group By P.PRODUCT_CATEGORY Order By P.PRODUCT_CATEGORY;

Select PRODUCT_CATEGORY, Round(sum_price/sum(sum_price) over ()*100, 2) Percentage_revenue from(
select P.PRODUCT_CATEGORY , sum(OT.PRICE) sum_price  from ORDER_ITEMS OT Inner Join PRODUCTS P ON OT.PRODUCT_ID=P.PRODUCT_ID
Group By P.PRODUCT_CATEGORY Order By P.PRODUCT_CATEGORY);

--9. Identify the correlation between product price and the number of times a product has been purchased.

select PRODUCT_CATEGORY, Round(Avg(Price), 2) Price1, Count(OT.Product_id) Product_count from ORDER_ITEMS OT Inner Join products P ON P.PRODUCT_ID=OT.PRODUCT_ID Group By PRODUCT_CATEGORY Order By Price1;
--GROUP By Price order by count(*) Desc;

-- 10. Calculate the total revenue generated by each seller, and rank them by revenue.
select order_items.seller_id, sum(payments.payment_value)
revenue from order_items join payments
on order_items.order_id = payments.order_id
group by order_items.seller_id Order By sum(payments.payment_value) Desc;

SELECT 
    a.seller_id,
    a.revenue,
    DENSE_RANK() OVER (ORDER BY a.revenue DESC) rn
FROM (
    SELECT 
        oi.seller_id,
        SUM(p.payment_value) AS revenue
    FROM order_items oi
    JOIN payments p 
        ON oi.order_id = p.order_id
    GROUP BY oi.seller_id
) a;

--11. Calculate the moving average of order values for each customer over their order history.
SELECT
    CUSTOMER_ID,
    ORDER_PURCHASE_TIMESTAMP,
    PAYMENT,
    AVG(PAYMENT) OVER(
        PARTITION BY CUSTOMER_ID
        ORDER BY ORDER_PURCHASE_TIMESTAMP
        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
    ) AS MOV_AVG
FROM (
    SELECT
        O.CUSTOMER_ID,
        O.ORDER_PURCHASE_TIMESTAMP,
        P.PAYMENT_VALUE AS PAYMENT
    FROM PAYMENTS P
    JOIN ORDERS O
        ON P.ORDER_ID = O.ORDER_ID
) A;

----12. Calculate the cumulative sales per month for each year.
-- First find Sale per Month according to Year    
    SELECT 
    EXTRACT(YEAR FROM orders.order_purchase_timestamp) AS years,
    EXTRACT(MONTH FROM orders.order_purchase_timestamp) AS months,
    ROUND(SUM(payments.payment_value), 2) AS payment
FROM orders 
JOIN payments 
    ON orders.order_id = payments.order_id
GROUP BY 
    EXTRACT(YEAR FROM orders.order_purchase_timestamp),
    EXTRACT(MONTH FROM orders.order_purchase_timestamp)
ORDER BY 
    years, months;

--Cumulative sales per month for each year. Adding All sum of payment by now.
select years, months , payment, sum(payment)
over(order by years, months) cumulative_sales from (SELECT 
    EXTRACT(YEAR FROM orders.order_purchase_timestamp) AS years,
    EXTRACT(MONTH FROM orders.order_purchase_timestamp) AS months,
    ROUND(SUM(payments.payment_value), 2) AS payment
FROM orders 
JOIN payments 
    ON orders.order_id = payments.order_id
GROUP BY 
    EXTRACT(YEAR FROM orders.order_purchase_timestamp),
    EXTRACT(MONTH FROM orders.order_purchase_timestamp)
ORDER BY 
    years, months);
    
    
-- 13. Calculate the year-over-year growth rate of total sales.

SELECT Years1,Sale, Round((Sale-lag(Sale,1)over(order by Years1))/lag(Sale,1) over(order by Years1)*100,2)  growth_rate from (Select EXTRACT(YEAR FROM ORDER_PURCHASE_TIMESTAMP) Years1, sum(PAYMENT_VALUE) Sale FROM orders o 
INNER JOIN payments p ON o.Order_id=p.Order_id
GROUP BY EXTRACT(YEAR FROM ORDER_PURCHASE_TIMESTAMP)
Order by Years1);

--14.Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.
-- Step: Get each customerï¿½s first purchase date
Select CUSTOMER_ID, min(ORDER_PURCHASE_TIMESTAMP) First_Order from orders 
GROUP BY CUSTOMER_ID ORDER BY First_Order;
--Step 2: Find customers who purchased again within 6 months of that date
with First_Order As (Select min(ORDER_PURCHASE_TIMESTAMP) from orders 
GROUP BY CUSTOMER_ID ORDER BY First_Order);

WITH first_purchase AS (
    SELECT 
        customer_id,
        MIN(order_purchase_timestamp) AS first_purchase_date
    FROM orders
    GROUP BY customer_id
),
retained_customers AS (
    SELECT DISTINCT o.customer_id
    FROM orders o
    JOIN first_purchase f
        ON o.customer_id = f.customer_id
    WHERE o.order_purchase_timestamp > f.first_purchase_date
      AND o.order_purchase_timestamp <= ADD_MONTHS(f.first_purchase_date, 6)
)
SELECT 
    ROUND(
        (COUNT(DISTINCT r.customer_id) * 100.0) / COUNT(DISTINCT f.customer_id),
        2
    ) AS retention_rate_percent
FROM first_purchase f
LEFT JOIN retained_customers r
    ON f.customer_id = r.customer_id;

-- Customer with repeated
WITH first_purchase AS (
    SELECT 
        customer_id,
        MIN(order_purchase_timestamp) AS first_purchase_date
    FROM orders
    GROUP BY customer_id
) Select Distinct f.Customer_id from Orders o Left Join first_purchase f ON o.Customer_id = f.Customer_id
WHERE o.order_purchase_timestamp > f.first_purchase_date
      AND o.order_purchase_timestamp <= ADD_MONTHS(f.first_purchase_date, 6);
      
--15. Identify the top 3 customers who spent the most money in each year.
Select * from
(select o.CUSTOMER_ID, Extract (Year from ORDER_PURCHASE_TIMESTAMP) Years, Sum(PAYMENT_VALUE) Payment,  dense_rank() Over(Partition By Extract (Year from ORDER_PURCHASE_TIMESTAMP) Order By Sum(PAYMENT_VALUE) Desc) DRank
from Orders o Inner Join PAYMENTS P ON o.ORDER_ID=p.ORDER_ID
Group By o.CUSTOMER_ID, Extract (Year from ORDER_PURCHASE_TIMESTAMP)Order By Years)
where DRank<4;